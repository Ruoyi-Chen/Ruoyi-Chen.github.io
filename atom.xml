<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ruoyi-chen.github.io</id>
    <title>Chen Ruoyi </title>
    <updated>2021-11-04T12:26:02.902Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ruoyi-chen.github.io"/>
    <link rel="self" href="https://ruoyi-chen.github.io/atom.xml"/>
    <subtitle>Per Aspera Ad Astra | 循此苦旅，以达天际</subtitle>
    <logo>https://ruoyi-chen.github.io/images/avatar.png</logo>
    <icon>https://ruoyi-chen.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Chen Ruoyi </rights>
    <entry>
        <title type="html"><![CDATA[JDBC（1）获取数据库连接的四种方法]]></title>
        <id>https://ruoyi-chen.github.io/post/this-is-cherry/</id>
        <link href="https://ruoyi-chen.github.io/post/this-is-cherry/">
        </link>
        <updated>2021-11-04T08:45:59.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95">获取数据库连接的四种方法</a>
<ul>
<li><a href="#%E6%96%B9%E6%B3%951-diver-%E6%9E%84%E9%80%A0connection%E6%94%BE%E5%85%A5url%E5%92%8Cinfo">方法1： Diver -&gt; 构造connection放入url和info</a></li>
<li><a href="#%E6%96%B9%E6%B3%952-%E4%BD%BF%E7%94%A8%E5%8F%8D%E5%B0%84%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96driver%E7%B1%BB%E5%AF%B9%E8%B1%A1">方法2: 使用反射动态获取Driver类对象</a></li>
<li><a href="#%E6%96%B9%E6%B3%953-%E4%BD%BF%E7%94%A8drivermanager%E6%9B%BF%E6%8D%A2driver">方法3: 使用DriverManager替换Driver</a></li>
<li><a href="#%E6%96%B9%E6%B3%954-%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95%E4%B8%89%E5%8F%AF%E4%BB%A5%E5%8F%AA%E5%8A%A0%E8%BD%BD%E9%A9%B1%E5%8A%A8%E4%B8%8D%E7%94%A8%E6%98%BE%E7%A4%BA%E5%9C%B0%E6%B3%A8%E5%86%8C%E9%A9%B1%E5%8A%A8%E4%BA%86">方法4: 优化方法三：可以只加载驱动，不用显示地注册驱动了。</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="获取数据库连接的四种方法">获取数据库连接的四种方法</h1>
<p>Note: 以下方法为了看着简介都用了throws exception，最好用try-catch包一下。</p>
<h2 id="方法1-diver-构造connection放入url和info">方法1： Diver -&gt; 构造connection放入url和info</h2>
<pre><code>- url在Driver的源码里面可以找到：&quot;jdbc:mysql://localhost:3306/test&quot;
- setProperty：放入user和password
</code></pre>
<pre><code class="language-java">    @Test
    public void testConnection1() throws Exception {
        Driver driver = new com.mysql.cj.jdbc.Driver();

        //url: http://localhost:8080/gmall/keyboard.jpg
        //jdbc:mysql协议
        //localhost:ip地址
        //3306:默认mysql端口号
        //test：test数据库
        String url = &quot;jdbc:mysql://localhost:3306/test&quot;;
        //将用户名和密码封装在Properties中
        Properties info =new Properties();
        info.setProperty(&quot;user&quot;,&quot;root&quot;);
        info.setProperty(&quot;password&quot;,&quot;cherry123&quot;);

        Connection conn = driver.connect(url, info);

        System.out.println(conn);
    }
</code></pre>
<h2 id="方法2-使用反射动态获取driver类对象">方法2: 使用反射动态获取Driver类对象</h2>
<p>因为我们可能需要换成Oracle或其他的数据库，所以动态的去调Driver对象可以使代码更有可扩展性。</p>
<pre><code class="language-java">    public void testConnection2() throws Exception {
        //1. 获取Driver实现类对象，使用反射
        Class clazz = Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
        Driver driver = (Driver) clazz.newInstance();

        //2.提供要链接的数据库
        String url = &quot;jdbc:mysql://localhost:3306/test&quot;;

        //3.提供链接需要的用户名和密码
        Properties info =new Properties();
        info.setProperty(&quot;user&quot;,&quot;root&quot;);
        info.setProperty(&quot;password&quot;,&quot;cherry123&quot;);

        //4.获取链接
        Connection conn = driver.connect(url, info);
        System.out.println(conn);
    }
</code></pre>
<h2 id="方法3-使用drivermanager替换driver">方法3: 使用DriverManager替换Driver</h2>
<pre><code class="language-java">    public void testConnection3() throws Exception {
        //1。获取Driver实现类对象
        Class clazz = Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
        Driver driver = (Driver) clazz.newInstance();

        //2，提供另外三个链接的基本信息
        String url = &quot;jdbc:mysql://localhost:3306/test&quot;;
        String user = &quot;root&quot;;
        String password = &quot;cherry123&quot;;

        //注册驱动
        DriverManager.registerDriver(driver);

        //获取链接
        Connection conn = DriverManager.getConnection(url, user, password);
        System.out.println(conn);
    }
</code></pre>
<h2 id="方法4-优化方法三可以只加载驱动不用显示地注册驱动了">方法4: 优化方法三：可以只加载驱动，不用显示地注册驱动了。</h2>
<p>这是因为在载入时已经注册了。</p>
<pre><code class="language-java">    public void testConnection4() throws Exception {
        //1，提供另外三个链接的基本信息
        String url = &quot;jdbc:mysql://localhost:3306/test&quot;;
        String user = &quot;root&quot;;
        String password = &quot;cherry123&quot;;

        //2。获取Driver实现类对象
        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
        //这两步就不需要了：
//        Driver driver = (Driver) clazz.newInstance();
//        //注册驱动
//        DriverManager.registerDriver(driver);

        //获取链接
        Connection conn = DriverManager.getConnection(url, user, password);
        System.out.println(conn);
    }
}
</code></pre>
]]></content>
    </entry>
</feed>